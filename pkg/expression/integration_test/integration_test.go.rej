@@ -53,6 +53,345 @@
 	"github.com/stretchr/testify/require"
 )
 
+func TestVectorVariable(t *testing.T) {
+	store := testkit.CreateMockStore(t)
+
+	tk := testkit.NewTestKit(t, store)
+	tk.MustExec("USE test;")
+
+	tk.MustExec("CREATE USER semroot")
+	tk.MustExec(`GRANT ALL PRIVILEGES ON *.* TO semroot;`)
+	tk.MustExec("GRANT RESTRICTED_VARIABLES_ADMIN ON *.* to semroot;")
+
+	sem.Disable()
+
+	tk.MustExecToErr(`CREATE TABLE t1 (v VECTOR);`)
+
+	sem.Enable(config.SEMLevelBasic)
+
+	// root cannot set global variable in SEMLevelBasic
+	require.NoError(t, tk.Session().Auth(&auth.UserIdentity{Username: "root", Hostname: "localhost"}, nil, nil, nil))
+	tk.MustExecToErr(`CREATE TABLE t1 (v VECTOR);`)
+	tk.MustExecToErr("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=1;")
+	tk.MustExecToErr(`CREATE TABLE t1 (v VECTOR);`)
+
+	// semroot can set global variable in SEMLevelBasic
+	require.NoError(t, tk.Session().Auth(&auth.UserIdentity{Username: "semroot", Hostname: "localhost"}, nil, nil, nil))
+	tk.MustExecToErr(`CREATE TABLE t1 (v VECTOR);`)
+	tk.MustExec("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=1;")
+	tk.MustExec(`CREATE TABLE t1 (v VECTOR);`)
+	tk.MustExec("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=0;")
+	tk.MustExec(`DROP TABLE t1;`)
+	tk.MustExecToErr(`CREATE TABLE t1 (v VECTOR);`)
+
+	sem.Enable(config.SEMLevelStrict)
+
+	// root cannot set global variable in SEMLevelStrict
+	require.NoError(t, tk.Session().Auth(&auth.UserIdentity{Username: "root", Hostname: "localhost"}, nil, nil, nil))
+	tk.MustExecToErr("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=1;")
+	tk.MustExecToErr(`CREATE TABLE t1 (v VECTOR);`)
+
+	// semroot can set global variable in SEMLevelStrict
+	require.NoError(t, tk.Session().Auth(&auth.UserIdentity{Username: "semroot", Hostname: "localhost"}, nil, nil, nil))
+	tk.MustExecToErr(`CREATE TABLE t1 (v VECTOR);`)
+	tk.MustExec("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=1;")
+	tk.MustExec(`CREATE TABLE t1 (v VECTOR);`)
+	tk.MustExec("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=0;")
+	tk.MustExec(`DROP TABLE t1;`)
+	tk.MustExecToErr(`CREATE TABLE t1 (v VECTOR);`)
+
+	sem.Disable()
+
+	// root can set global variable when SEM is disabled
+	require.NoError(t, tk.Session().Auth(&auth.UserIdentity{Username: "root", Hostname: "localhost"}, nil, nil, nil))
+	tk.MustExec("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=1;")
+	tk.MustExec(`CREATE TABLE t1 (v VECTOR);`)
+	tk.MustExec("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=0;")
+	tk.MustExec(`DROP TABLE t1;`)
+	tk.MustExecToErr(`CREATE TABLE t1 (v VECTOR);`)
+
+	// semroot can set global variable when SEM is disabled
+	require.NoError(t, tk.Session().Auth(&auth.UserIdentity{Username: "semroot", Hostname: "localhost"}, nil, nil, nil))
+	tk.MustExec("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=1;")
+	tk.MustExec(`CREATE TABLE t1 (v VECTOR);`)
+	tk.MustExec("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=0;")
+	tk.MustExec(`DROP TABLE t1;`)
+	tk.MustExecToErr(`CREATE TABLE t1 (v VECTOR);`)
+}
+
+func TestVector(t *testing.T) {
+	store := testkit.CreateMockStore(t)
+
+	tk := testkit.NewTestKit(t, store)
+	tk.MustExec("USE test;")
+
+	tk.MustExecToErr(`CREATE TABLE t1 (v VECTOR);`)
+
+	tk.MustExec("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=1;")
+	tk.MustExec(`CREATE TABLE t1 (v VECTOR);`)
+	tk.MustExecToErr(`INSERT INTO t1 VALUES ('abc');`)
+	tk.MustExec(`INSERT INTO t1 VALUES ('[1,2.1,3.3]');`)
+	tk.MustExecToErr(`INSERT INTO t1 VALUES ('[1,2.1,null]');`)
+	tk.MustExecToErr(`INSERT INTO t1 VALUES ('[1,2.1,inf]');`)
+	tk.MustExecToErr(`INSERT INTO t1 VALUES ('[1,2.1,nan]');`)
+	tk.MustExec(`INSERT INTO t1 VALUES ('[]');`)
+	tk.MustExec(`INSERT INTO t1 VALUES (NULL);`)
+	tk.MustQuery("SELECT * FROM t1;").Check(testkit.Rows("[1,2.1,3.3]", "[]", "<nil>"))
+	tk.MustQuery("SELECT VEC_DIMS(v) FROM t1;").Check(testkit.Rows("3", "0", "<nil>"))
+
+	tk.MustQuery("SELECT VEC_DIMS(NULL);").Check(testkit.Rows("<nil>"))
+	tk.MustQuery("SELECT VEC_DIMS('[]');").Check(testkit.Rows("0"))
+	tk.MustQuery("SELECT VEC_DIMS('[5, 3, 2]');").Check(testkit.Rows("3"))
+
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[]');").Check(testkit.Rows("[]"))
+
+	// Basic sort
+	tk.MustExec(`CREATE TABLE t(val VECTOR);`)
+	tk.MustExec(`INSERT INTO t VALUES
+		('[8.7, 5.7, 7.7, 9.8, 1.5]'),
+		('[3.6, 9.7, 2.4, 6.6, 4.9]'),
+		('[4.7, 4.9, 2.6, 5.2, 7.4]'),
+		('[7.7, 6.7, 8.3, 7.8, 5.7]'),
+		('[1.4, 4.5, 8.5, 7.7, 6.2]');
+	`)
+	tk.MustQuery(`SELECT * FROM t ORDER BY val DESC;`).Check(testkit.Rows(
+		"[8.7,5.7,7.7,9.8,1.5]",
+		"[7.7,6.7,8.3,7.8,5.7]",
+		"[4.7,4.9,2.6,5.2,7.4]",
+		"[3.6,9.7,2.4,6.6,4.9]",
+		"[1.4,4.5,8.5,7.7,6.2]",
+	))
+
+	// Arithmatic: Currently not implemented.
+	tk.MustQueryToErr(`SELECT VEC_FROM_TEXT('[1,2]') + VEC_FROM_TEXT('[2,3]')`)
+}
+
+func TestVectorOperators(t *testing.T) {
+	store := testkit.CreateMockStore(t)
+
+	tk := testkit.NewTestKit(t, store)
+	tk.MustExec("USE test;")
+	tk.MustExec("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=1;")
+	tk.MustExec(`CREATE TABLE t(embedding VECTOR);`)
+	tk.MustExec(`INSERT INTO t VALUES
+		('[1, 2, 3]'),
+		('[4, 5, 6]'),
+		('[7, 8, 9]');
+	`)
+
+	tk.MustQuery(`SELECT VEC_FROM_TEXT('[]') IS TRUE`).Check(testkit.Rows("0"))
+	tk.MustQuery(`SELECT VEC_FROM_TEXT('[]') IS FALSE`).Check(testkit.Rows("1"))
+	tk.MustQuery(`SELECT VEC_FROM_TEXT('[]') IS UNKNOWN`).Check(testkit.Rows("0"))
+	tk.MustQuery(`SELECT VEC_FROM_TEXT('[]') IS NOT NULL`).Check(testkit.Rows("1"))
+	tk.MustQuery(`SELECT VEC_FROM_TEXT('[]') IS NULL`).Check(testkit.Rows("0"))
+	tk.MustQuery(`SELECT * FROM t WHERE embedding = VEC_FROM_TEXT('[1,2,3]');`).Check(testkit.Rows("[1,2,3]"))
+	tk.MustQuery(`SELECT * FROM t WHERE embedding BETWEEN '[1, 2, 3]' AND '[4, 5, 6]'`).Check(testkit.Rows("[1,2,3]", "[4,5,6]"))
+	tk.MustExecToErr(`SELECT * FROM t WHERE embedding IN ('[1, 2, 3]', '[4, 5, 6]')`)
+	tk.MustExecToErr(`SELECT * FROM t WHERE embedding NOT IN ('[1, 2, 3]', '[4, 5, 6]')`)
+}
+
+func TestVectorCompare(t *testing.T) {
+	store := testkit.CreateMockStore(t)
+
+	tk := testkit.NewTestKit(t, store)
+	tk.MustExec("USE test;")
+
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[]') = VEC_FROM_TEXT('[]');").Check(testkit.Rows("1"))
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[]') != VEC_FROM_TEXT('[]');").Check(testkit.Rows("0"))
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[]') > VEC_FROM_TEXT('[]');").Check(testkit.Rows("0"))
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[]') >= VEC_FROM_TEXT('[]');").Check(testkit.Rows("1"))
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[]') < VEC_FROM_TEXT('[]');").Check(testkit.Rows("0"))
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[]') <= VEC_FROM_TEXT('[]');").Check(testkit.Rows("1"))
+
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[1, 2, 3]') = VEC_FROM_TEXT('[1, 2, 3]');").Check(testkit.Rows("1"))
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[1, 2, 3]') != VEC_FROM_TEXT('[1, 2, 3]');").Check(testkit.Rows("0"))
+
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[1, 2, 3]') > VEC_FROM_TEXT('[1]');").Check(testkit.Rows("1"))
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[1, 2, 3]') >= VEC_FROM_TEXT('[1]');").Check(testkit.Rows("1"))
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[1, 2, 3]') < VEC_FROM_TEXT('[1]');").Check(testkit.Rows("0"))
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[1, 2, 3]') <= VEC_FROM_TEXT('[1]');").Check(testkit.Rows("0"))
+
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[1, 2, 3]') > '[1]';").Check(testkit.Rows("1"))
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[1, 2, 3]') >= '[1]';").Check(testkit.Rows("1"))
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[1, 2, 3]') < '[1]';").Check(testkit.Rows("0"))
+	tk.MustQuery("SELECT VEC_FROM_TEXT('[1, 2, 3]') <= '[1]';").Check(testkit.Rows("0"))
+}
+
+func TestVectorConversion(t *testing.T) {
+	store := testkit.CreateMockStore(t)
+
+	tk := testkit.NewTestKit(t, store)
+	tk.MustExec("USE test;")
+	tk.MustExec("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=1;")
+	tk.MustExec(`CREATE TABLE t1 (val vector);`)
+
+	// CAST
+	tk.MustQuery("SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS BINARY);").Check(testkit.Rows("[1,2,3]"))
+	tk.MustQuery("SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS CHAR);").Check(testkit.Rows("[1,2,3]"))
+	tk.MustQueryToErr("SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS JSON);")
+	tk.MustQueryToErr("SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DECIMAL(2));")
+	tk.MustQueryToErr("SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DOUBLE);")
+	tk.MustQueryToErr("SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS FLOAT);")
+	tk.MustQueryToErr("SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS REAL);")
+	tk.MustQueryToErr("SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS SIGNED);")
+	tk.MustQueryToErr("SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS UNSIGNED);")
+	tk.MustQueryToErr("SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS YEAR);")
+	tk.MustQueryToErr("SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DATETIME);")
+	tk.MustQueryToErr("SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DATE);")
+	tk.MustQueryToErr("SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS TIME);")
+
+	tk.MustQuery("SELECT CAST('[1,2,3]' AS VECTOR);").Check(testkit.Rows("[1,2,3]"))
+	tk.MustQuery("SELECT CAST('[1,2,3]' AS VECTOR<FLOAT>);").Check(testkit.Rows("[1,2,3]"))
+	tk.MustExecToErr("SELECT CAST('[1,2,3]' AS VECTOR<DOUBLE>);")
+
+	// CONVERT
+	tk.MustQuery("SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), BINARY);").Check(testkit.Rows("[1,2,3]"))
+	tk.MustQuery("SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), CHAR);").Check(testkit.Rows("[1,2,3]"))
+	tk.MustQueryToErr("SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), JSON);")
+	tk.MustQueryToErr("SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DECIMAL);")
+	tk.MustQueryToErr("SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DOUBLE);")
+	tk.MustQueryToErr("SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), FLOAT);")
+	tk.MustQueryToErr("SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), REAL);")
+	tk.MustQueryToErr("SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), SIGNED);")
+	tk.MustQueryToErr("SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), UNSIGNED);")
+	tk.MustQueryToErr("SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), YEAR);")
+	tk.MustQueryToErr("SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DATETIME);")
+	tk.MustQueryToErr("SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DATE);")
+	tk.MustQueryToErr("SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), TIME);")
+}
+
+func TestVectorAggregations(t *testing.T) {
+	store := testkit.CreateMockStore(t)
+
+	tk := testkit.NewTestKit(t, store)
+	tk.MustExec("USE test;")
+	tk.MustExec("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=1;")
+	tk.MustExec(`CREATE TABLE t(val VECTOR);`)
+	tk.MustExec(`INSERT INTO t VALUES
+		('[8.7, 5.7, 7.7, 9.8, 1.5]'),
+		('[3.6, 9.7, 2.4, 6.6, 4.9]'),
+		('[4.7, 4.9, 2.6, 5.2, 7.4]'),
+		('[4.7, 4.9, 2.6, 5.2, 7.4]'),
+		('[7.7, 6.7, 8.3, 7.8, 5.7]'),
+		('[1.4, 4.5, 8.5, 7.7, 6.2]');
+	`)
+	tk.MustExec(`ANALYZE TABLE t;`)
+
+	tk.MustQuery(`SELECT COUNT(*), val FROM t GROUP BY val ORDER BY val`).Check(testkit.Rows(
+		"1 [1.4,4.5,8.5,7.7,6.2]",
+		"1 [3.6,9.7,2.4,6.6,4.9]",
+		"2 [4.7,4.9,2.6,5.2,7.4]",
+		"1 [7.7,6.7,8.3,7.8,5.7]",
+		"1 [8.7,5.7,7.7,9.8,1.5]",
+	))
+	tk.MustQuery(`SELECT COUNT(val) FROM t`).Check(testkit.Rows("6"))
+	tk.MustQuery(`SELECT COUNT(DISTINCT val) FROM t`).Check(testkit.Rows("5"))
+	tk.MustQuery(`SELECT MIN(val) FROM t`).Check(testkit.Rows("[1.4,4.5,8.5,7.7,6.2]"))
+	tk.MustQuery(`SELECT MAX(val) FROM t`).Check(testkit.Rows("[8.7,5.7,7.7,9.8,1.5]"))
+	tk.MustQueryToErr(`SELECT SUM(val) FROM t`)
+	tk.MustQueryToErr(`SELECT AVG(val) FROM t`)
+	tk.MustQuery(`SELECT val FROM t GROUP BY val HAVING val > VEC_FROM_TEXT('[4.7,4.9,2.6,5.2,7.4]') ORDER BY val`).Check(testkit.Rows(
+		"[7.7,6.7,8.3,7.8,5.7]",
+		"[8.7,5.7,7.7,9.8,1.5]",
+	))
+}
+
+func TestVectorWindow(t *testing.T) {
+	store := testkit.CreateMockStore(t)
+
+	tk := testkit.NewTestKit(t, store)
+	tk.MustExec("USE test;")
+	tk.MustExec("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=1;")
+	tk.MustExec(`DROP TABLE IF EXISTS t;`)
+	tk.MustExec(`CREATE TABLE t (embedding VECTOR);`)
+	tk.MustExec(`INSERT INTO t VALUES
+		('[1, 2, 3]'),
+		('[4, 5, 601]'),
+		('[4, 5, 61]');
+	`)
+
+	tk.MustQuery(`SELECT embedding, FIRST_VALUE(embedding) OVER w AS first, NTH_VALUE(embedding, 2) OVER w AS second, LAST_VALUE(embedding) OVER w AS last
+	FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;`).Check(testkit.Rows(
+		"[1,2,3] [1,2,3] <nil> [1,2,3]",
+		"[4,5,61] [1,2,3] [4,5,61] [4,5,61]",
+		"[4,5,601] [1,2,3] [4,5,61] [4,5,601]",
+	))
+
+	tk.MustExec(`DELETE FROM t WHERE 1 = 1`)
+	tk.MustExec(`INSERT INTO t VALUES
+		('[1, 2, 3]'),
+		('[4, 5, 6]'),
+		('[4, 5, 6]'),
+		('[7, 8, 9]');
+	`)
+
+	tk.MustQuery(`SELECT embedding, ROW_NUMBER() OVER w AS 'row_num', RANK() OVER w AS 'rank', DENSE_RANK() OVER w AS 'dense_rank'
+	FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;`).Check(testkit.Rows(
+		"[1,2,3] 1 1 1",
+		"[4,5,6] 2 2 2",
+		"[4,5,6] 3 2 2",
+		"[7,8,9] 4 4 3",
+	))
+
+	tk.MustQuery(`SELECT embedding, LAG(embedding) OVER w AS 'lag', LEAD(embedding) OVER w AS 'lead'
+	FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;`).Check(testkit.Rows(
+		"[1,2,3] <nil> [4,5,6]",
+		"[4,5,6] [1,2,3] [4,5,6]",
+		"[4,5,6] [4,5,6] [7,8,9]",
+		"[7,8,9] [4,5,6] <nil>",
+	))
+
+	tk.MustQuery(`SELECT embedding, ROW_NUMBER() OVER (PARTITION BY embedding ORDER BY embedding) AS 'row_num'
+	FROM t ORDER BY embedding;`).Check(testkit.Rows(
+		"[1,2,3] 1",
+		"[4,5,6] 1",
+		"[4,5,6] 2",
+		"[7,8,9] 1",
+	))
+}
+
+func TestVectorSetOperation(t *testing.T) {
+	store := testkit.CreateMockStore(t)
+
+	tk := testkit.NewTestKit(t, store)
+	tk.MustExec("USE test;")
+	tk.MustExec("SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE=1;")
+	tk.MustExec(`DROP TABLE IF EXISTS t1;`)
+	tk.MustExec(`CREATE TABLE t1 (embedding VECTOR);`)
+	tk.MustExec(`INSERT INTO t1 VALUES
+		('[1, 2, 3]'),
+		('[4, 5, 6]');
+	`)
+
+	tk.MustExec(`DROP TABLE IF EXISTS t2;`)
+	tk.MustExec(`CREATE TABLE t2 (embedding VECTOR);`)
+	tk.MustExec(`INSERT INTO t2 VALUES
+		('[4, 5, 6]'),
+		('[7, 8, 9]');
+	`)
+
+	tk.MustQuery(`(SELECT embedding FROM t1 UNION SELECT embedding FROM t2) ORDER BY embedding;`).Check(testkit.Rows(
+		"[1,2,3]",
+		"[4,5,6]",
+		"[7,8,9]",
+	))
+
+	tk.MustQuery(`(SELECT embedding FROM t1 UNION ALL SELECT embedding FROM t2) ORDER BY embedding;`).Check(testkit.Rows(
+		"[1,2,3]",
+		"[4,5,6]",
+		"[4,5,6]",
+		"[7,8,9]",
+	))
+
+	tk.MustQuery(`SELECT embedding FROM t1 INTERSECT SELECT embedding FROM t2;`).Check(testkit.Rows(
+		"[4,5,6]",
+	))
+
+	tk.MustQuery(`SELECT embedding FROM t1 EXCEPT SELECT embedding FROM t2;`).Check(testkit.Rows(
+		"[1,2,3]",
+	))
+}
+
 func Test19654(t *testing.T) {
 	store := testkit.CreateMockStore(t)
 
